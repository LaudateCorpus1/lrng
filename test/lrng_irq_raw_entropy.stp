#
# Obtain raw IRQ entropy data -- i.e. a read-out of the lrng_pool->pool
#
# Copyright (C) 2016, Stephan Mueller <smueller@chronox.de>
#
# To perform testing, you must hog on the lrng_get_fullentropy_data to ensure
# that the fullbuf is always empty and the DRBG logic always triggers
# lrng_get_pool. For example, simply do a cat /dev/random if the LRNG code
# provides the /dev/random interface (i.e. replaces the old /dev/random).
#
# WARNING: During the execution of that script, /dev/urandom or get_random_bytes
# will return 0!
#
# Execute on a quiet test system:
#
#	1. cat /dev/random > /dev/null or cat /dev/urandom > /dev/null to be
#	   performed in parallel to test
#
#	2. stap -gvw <THISFILE>
#
#	3. on another system: ping -f <IP OF TESTSSYTEM>
#
#	4. wait until enough data is generated from step 1
#
# Analyze: convert output into binary and then run your favorite analyzer
#

# Stolen from Tapset kernel_int but with unsigned int conversion
#function kernel_uint:long (addr:long) %{ /* pure */
#  STAP_RETVALUE = kread((unsigned int *) (intptr_t) STAP_ARG_addr);
#  if (0) {
#deref_fault: /* branched to from kread() */
#    snprintf (CONTEXT->error_buffer, sizeof(CONTEXT->error_buffer),
#        "kernel int copy fault at 0x%p [man error::fault]", (void *) (uintptr_t) STAP_ARG_addr);
#    CONTEXT->last_error = CONTEXT->error_buffer;
#  }
#%}

# Obtain raw entropy from entropy pool when mixed into the DRBG. This test
# only works with a noinline of the lrng_get_pool function. Hook the script
# in at line "IRQ Raw Entropy Hook".
probe kernel.function("lrng_pool_lfsr_u32")
{
	printf("%08x", $value);
#printf("%08x", kernel_uint(@var("lrng_pool@crypto/lrng.c")->pool + $ptr * 4));
}

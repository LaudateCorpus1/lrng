--- linux-5.8/drivers/char/lrng/lrng_sw_noise.c.orig	2020-12-05 15:46:11.032798120 +0100
+++ linux-5.8/drivers/char/lrng/lrng_sw_noise.c	2020-12-05 15:42:32.324435974 +0100
@@ -12,6 +12,7 @@
 #include <crypto/hash.h>
 #include <linux/lrng.h>
 #include <linux/random.h>
+#include <linux/ratelimit.h>
 
 #include "lrng_internal.h"
 #include "lrng_sw_noise.h"
@@ -510,8 +511,10 @@ static inline void lrng_pcpu_array_add_s
 
 /*
  * Batching up of entropy in per-CPU array before injecting into entropy pool.
+ *
+ * The random32_data is solely to be used for the external random32 PRNG.
  */
-static inline void lrng_time_process(void)
+static inline void lrng_time_process(u32 random32_data)
 {
 	u32 now_time = random_get_entropy();
 	u32 now_time_masked = now_time & LRNG_DATA_SLOTSIZE_MASK;
@@ -519,6 +522,10 @@ static inline void lrng_time_process(voi
 
 	/* During boot time, we process the full time stamp */
 	if (unlikely(!lrng_state_fully_seeded())) {
+
+		/* Seed random32 PRNG with data not used by LRNG. */
+		this_cpu_add(net_rand_state.s1, random32_data);
+
 		if (lrng_raw_hires_entropy_store(now_time))
 			goto out;
 
@@ -535,6 +542,10 @@ static inline void lrng_time_process(voi
 		if (lrng_raw_hires_entropy_store(now_time_masked))
 			goto out;
 
+		/* Seed random32 PRNG with data not used by LRNG. */
+		this_cpu_add(net_rand_state.s1,
+			(now_time & ~LRNG_DATA_SLOTSIZE_MASK) ^ random32_data);
+
 		health_test = lrng_health_test(now_time_masked);
 		if (health_test > lrng_health_fail_use)
 			goto out;
@@ -553,13 +564,17 @@ out:
 /* Hot code path - Callback for interrupt handler */
 void add_interrupt_randomness(int irq, int irq_flg)
 {
+	u32 tmp;
+
 	if (lrng_pool_highres_timer()) {
-		lrng_time_process();
+		tmp = lrng_raw_irq_entropy_store(irq) ? 0 : irq;
+		tmp ^= lrng_raw_irqflags_entropy_store(irq_flg) ? 0 : irq_flg;
+		tmp ^= lrng_raw_retip_entropy_store(_RET_IP_) ? 0 : _RET_IP_;
+		lrng_time_process(tmp);
 	} else {
 		struct pt_regs *regs = get_irq_regs();
 		static atomic_t reg_idx = ATOMIC_INIT(0);
 		u64 ip;
-		u32 tmp;
 
 		if (regs) {
 			u32 *ptr = (u32 *)regs;
@@ -574,7 +589,7 @@ void add_interrupt_randomness(int irq, i
 			ip = _RET_IP_;
 		}
 
-		lrng_time_process();
+		lrng_time_process(lrng_raw_retip_entropy_store(ip) ? 0 : ip);
 
 		/*
 		 * The XOR operation combining the different values is not
@@ -582,11 +597,11 @@ void add_interrupt_randomness(int irq, i
 		 * processed values delivers the entropy (and not each
 		 * value separately of the other values).
 		 */
+		ip >>= 32;
 		tmp = lrng_raw_jiffies_entropy_store(jiffies) ? 0 : jiffies;
 		tmp ^= lrng_raw_irq_entropy_store(irq) ? 0 : irq;
 		tmp ^= lrng_raw_irqflags_entropy_store(irq_flg) ? 0 : irq_flg;
 		tmp ^= lrng_raw_retip_entropy_store(ip) ? 0 : ip;
-		tmp ^= ip >> 32;
 		_lrng_pcpu_array_add_u32(tmp);
 	}
 }

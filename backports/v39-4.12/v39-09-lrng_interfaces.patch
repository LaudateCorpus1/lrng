--- linux-4.10/drivers/char/lrng/lrng_interfaces.c.orig	2020-08-25 10:35:28.241943636 +0200
+++ linux-4.10/drivers/char/lrng/lrng_interfaces.c	2020-08-25 10:35:59.512047105 +0200
@@ -342,7 +342,7 @@ EXPORT_SYMBOL(wait_for_random_bytes);
  *
  * Return: number of bytes filled in.
  */
-int __must_check get_random_bytes_arch(void *buf, int nbytes)
+void get_random_bytes_arch(void *buf, int nbytes)
 {
 	u8 *p = buf;
 
@@ -360,8 +360,6 @@ int __must_check get_random_bytes_arch(v
 
 	if (nbytes)
 		lrng_drng_get_atomic((u8 *)p, (u32)nbytes);
-
-	return nbytes;
 }
 EXPORT_SYMBOL(get_random_bytes_arch);
 
@@ -469,18 +467,18 @@ static ssize_t lrng_drng_read_block(stru
 	return lrng_read_common_block(file->f_flags & O_NONBLOCK, buf, nbytes);
 }
 
-static __poll_t lrng_random_poll(struct file *file, poll_table *wait)
+static unsigned int lrng_random_poll(struct file *file, poll_table *wait)
 {
-	__poll_t mask;
+	unsigned int mask;
 
 	poll_wait(file, &lrng_init_wait, wait);
 	poll_wait(file, &lrng_write_wait, wait);
 	mask = 0;
 	if (lrng_state_operational())
-		mask |= EPOLLIN | EPOLLRDNORM;
+		mask |= POLLIN | POLLRDNORM;
 	if (lrng_need_entropy() ||
 	    lrng_state_exseed_allow(lrng_noise_source_user))
-		mask |= EPOLLOUT | EPOLLWRNORM;
+		mask |= POLLOUT | POLLWRNORM;
 	return mask;
 }
 
@@ -586,18 +584,6 @@ static long lrng_ioctl(struct file *f, u
 			return -EPERM;
 		lrng_pool_set_entropy(0);
 		return 0;
-	case RNDRESEEDCRNG:
-		/*
-		 * We leave the capability check here since it is present
-		 * in the upstream's RNG implementation. Yet, user space
-		 * can trigger a reseed as easy as writing into /dev/random
-		 * or /dev/urandom where no privilege is needed.
-		 */
-		if (!capable(CAP_SYS_ADMIN))
-			return -EPERM;
-		/* Force a reseed of all DRNGs */
-		lrng_drng_force_reseed();
-		return 0;
 	default:
 		return -EINVAL;
 	}
